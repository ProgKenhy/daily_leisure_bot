from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import time
from config.middleware import AdminMiddleware
import logging

from feed.models import Place, PlaceCategory, WeekDay

logger = logging.getLogger(__name__)

admin_router = Router()
admin_router.message.middleware(AdminMiddleware())
admin_router.callback_query.middleware(AdminMiddleware())


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddPlaceStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_address = State()
    waiting_for_lat = State()
    waiting_for_lon = State()
    waiting_for_opening_time = State()
    waiting_for_closing_time = State()
    waiting_for_working_days = State()
    waiting_for_image_url = State()
    waiting_for_phone = State()
    waiting_for_website = State()
    waiting_for_rating = State()
    waiting_for_price_level = State()
    waiting_for_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


# –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º
skip_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirmation_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_place"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_place")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_place")
        ]
    ]
)


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    logger.info(f"Admin panel opened by user {message.from_user.id}")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")
async def start_add_place(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    logger.info(f"Starting place addition by user {message.from_user.id}")

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddPlaceStates.waiting_for_name)


# ... [–≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏ –¥–æ process_price_level] ...

@admin_router.message(AddPlaceStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞:", reply_markup=skip_keyboard)
    await state.set_state(AddPlaceStates.waiting_for_description)


@admin_router.message(AddPlaceStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=message.text)

    categories = list(PlaceCategory)
    categories_kb = ReplyKeyboardMarkup(
        keyboard=[
                     [KeyboardButton(text=cat.name) for cat in categories[i:i + 2]]
                     for i in range(0, len(categories), 2)
                 ] + [[KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb)
    await state.set_state(AddPlaceStates.waiting_for_category)


@admin_router.message(AddPlaceStates.waiting_for_category)
async def process_category(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        valid_categories = [cat.name for cat in PlaceCategory]
        if message.text not in valid_categories:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
        await state.update_data(category=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞:", reply_markup=skip_keyboard)
    await state.set_state(AddPlaceStates.waiting_for_address)


@admin_router.message(AddPlaceStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(address=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É (latitude):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddPlaceStates.waiting_for_lat)


@admin_router.message(AddPlaceStates.waiting_for_lat)
async def process_lat(message: Message, state: FSMContext):
    try:
        lat = float(message.text)
        if not (-90 <= lat <= 90):
            await message.answer("‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90!")
            return
        await state.update_data(loc_lat=lat)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É (longitude):")
        await state.set_state(AddPlaceStates.waiting_for_lon)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@admin_router.message(AddPlaceStates.waiting_for_lon)
async def process_lon(message: Message, state: FSMContext):
    try:
        lon = float(message.text)
        if not (-180 <= lon <= 180):
            await message.answer("‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180!")
            return
        await state.update_data(loc_lon=lon)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç HH:MM):", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_opening_time)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@admin_router.message(AddPlaceStates.waiting_for_opening_time)
async def process_opening_time(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(opening_time=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç HH:MM):", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_closing_time)
        return

    try:
        hours, minutes = map(int, message.text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã: 0-23, –º–∏–Ω—É—Ç—ã: 0-59")
            return
        opening_time = time(hours, minutes)
        await state.update_data(opening_time=opening_time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç HH:MM):", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_closing_time)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")


@admin_router.message(AddPlaceStates.waiting_for_closing_time)
async def process_closing_time(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(closing_time=None)
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        days_kb = ReplyKeyboardMarkup(
            keyboard=[
                         [KeyboardButton(text=day.name) for day in list(WeekDay)[i:i + 3]]
                         for i in range(0, len(WeekDay), 3)
                     ] + [[KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=days_kb)
        await state.set_state(AddPlaceStates.waiting_for_working_days)
        return

    try:
        hours, minutes = map(int, message.text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã: 0-23, –º–∏–Ω—É—Ç—ã: 0-59")
            return
        closing_time = time(hours, minutes)
        await state.update_data(closing_time=closing_time)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        days_kb = ReplyKeyboardMarkup(
            keyboard=[
                         [KeyboardButton(text=day.name) for day in list(WeekDay)[i:i + 3]]
                         for i in range(0, len(WeekDay), 3)
                     ] + [[KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=days_kb)
        await state.set_state(AddPlaceStates.waiting_for_working_days)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")


@admin_router.message(AddPlaceStates.waiting_for_working_days)
async def process_working_days(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(working_days=[])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_image_url)
        return

    selected_days = [day.strip() for day in message.text.split(',')]
    valid_days = [day.name for day in WeekDay]

    if all(day in valid_days for day in selected_days):
        await state.update_data(working_days=selected_days)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_image_url)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏!")


@admin_router.message(AddPlaceStates.waiting_for_image_url)
async def process_image_url(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not (message.text.startswith('http://') or message.text.startswith('https://')):
            await message.answer("‚ö†Ô∏è URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        await state.update_data(image_url=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=skip_keyboard)
    await state.set_state(AddPlaceStates.waiting_for_phone)


@admin_router.message(AddPlaceStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(phone=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç:", reply_markup=skip_keyboard)
    await state.set_state(AddPlaceStates.waiting_for_website)


@admin_router.message(AddPlaceStates.waiting_for_website)
async def process_website(message: Message, state: FSMContext):
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not (message.text.startswith('http://') or message.text.startswith('https://')):
            await message.answer("‚ö†Ô∏è URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        await state.update_data(website=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (0-5):", reply_markup=skip_keyboard)
    await state.set_state(AddPlaceStates.waiting_for_rating)


@admin_router.message(AddPlaceStates.waiting_for_rating)
async def process_rating(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(rating=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω (1-3):", reply_markup=skip_keyboard)
        await state.set_state(AddPlaceStates.waiting_for_price_level)
        return

    try:
        rating = float(message.text)
        if 0 <= rating <= 5:
            await state.update_data(rating=rating)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω (1-3):", reply_markup=skip_keyboard)
            await state.set_state(AddPlaceStates.waiting_for_price_level)
        else:
            await message.answer("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5!")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


@admin_router.message(AddPlaceStates.waiting_for_price_level)
async def process_price_level(message: Message, state: FSMContext):
    """–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    data = await state.get_data()

    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        try:
            price_level = int(message.text)
            if 1 <= price_level <= 3:
                data['price_level'] = price_level
                await state.update_data(price_level=price_level)
            else:
                await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3!")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3!")
            return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    await show_place_preview(message, state)


async def show_place_preview(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    opening_time = data.get('opening_time')
    closing_time = data.get('closing_time')
    time_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if opening_time and closing_time:
        time_str = f"{opening_time.strftime('%H:%M')} - {closing_time.strftime('%H:%M')}"
    elif opening_time:
        time_str = f"—Å {opening_time.strftime('%H:%M')}"
    elif closing_time:
        time_str = f"–¥–æ {closing_time.strftime('%H:%M')}"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã
    working_days = data.get('working_days', [])
    days_str = ", ".join(working_days) if working_days else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω
    price_level = data.get('price_level')
    price_str = {1: "$ (–ù–∏–∑–∫–∏–π)", 2: "$$ (–°—Ä–µ–¥–Ω–∏–π)", 3: "$$$ (–í—ã—Å–æ–∫–∏–π)"}.get(price_level, "–ù–µ —É–∫–∞–∑–∞–Ω")

    preview_text = f"""
üìç **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞:**

üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç **–ê–¥—Ä–µ—Å:** {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üó∫Ô∏è **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** {data.get('loc_lat', 'N/A')}, {data.get('loc_lon', 'N/A')}
‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {time_str}
üìÖ **–î–Ω–∏ —Ä–∞–±–æ—Ç—ã:** {days_str}
üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** {'–î–æ–±–∞–≤–ª–µ–Ω–æ' if data.get('image_url') else '–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üåê **–°–∞–π—Ç:** {data.get('website', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {data.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ **–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω:** {price_str}
    """

    await message.answer(
        preview_text,
        reply_markup=confirmation_keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(AddPlaceStates.waiting_for_confirmation)


@admin_router.callback_query(F.data == "save_place", AddPlaceStates.waiting_for_confirmation)
async def save_place_confirm(callback, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = await state.get_data()

        logger.info(f"Saving place by admin {callback.from_user.id}: {data.get('name')}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
        new_place = Place(
            name=data['name'],
            description=data.get('description'),
            category=data.get('category'),
            address=data.get('address'),
            loc_lat=data['loc_lat'],
            loc_lon=data['loc_lon'],
            opening_time=data.get('opening_time'),
            closing_time=data.get('closing_time'),
            working_days=data.get('working_days', []),
            image_url=data.get('image_url'),
            phone=data.get('phone'),
            website=data.get('website'),
            rating=data.get('rating'),
            price_level=data.get('price_level')
        )

        session.add(new_place)
        await session.commit()

        logger.info(f"Place '{data.get('name')}' successfully saved by admin {callback.from_user.id}")

        await callback.message.edit_text(
            "‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")],
                    [KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )
        await state.clear()

    except Exception as e:
        logger.error(f"Error saving place by admin {callback.from_user.id}: {e}")
        await session.rollback()
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}",
            reply_markup=None
        )
        await state.clear()

    await callback.answer()


@admin_router.callback_query(F.data == "edit_place", AddPlaceStates.waiting_for_confirmation)
async def edit_place_confirm(callback, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞"""
    await callback.message.edit_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddPlaceStates.waiting_for_name)
    await callback.answer()


@admin_router.callback_query(F.data == "cancel_place", AddPlaceStates.waiting_for_confirmation)
async def cancel_place_confirm(callback, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    logger.info(f"Place addition cancelled by admin {callback.from_user.id}")

    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
    await state.clear()
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@admin_router.message(Command("cancel"))
@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_operation(message: Message, state: FSMContext):
    """–û–±—â–∞—è –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç (–ø—Ä–∏–º–µ—Ä)
@admin_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç")
async def list_places(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç"""
    from sqlalchemy import select

    result = await session.execute(select(Place).limit(10))
    places = result.scalars().all()

    if not places:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç")
        return

    places_text = "üìã **–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç:**\n\n"
    for i, place in enumerate(places, 1):
        places_text += f"{i}. **{place.name}**\n"
        places_text += f"   üìç {place.address or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        places_text += f"   üè¢ {place.category or '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"

    await message.answer(places_text, parse_mode="Markdown")