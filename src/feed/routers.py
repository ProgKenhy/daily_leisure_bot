# from aiogram import Router, F
# from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
# from aiogram.filters import Command
# from sqlalchemy.ext.asyncio import AsyncSession
# from sqlalchemy import select, func
# from datetime import datetime, time
#
# from users.models import User, UserPlaceHistory, UserFeedState
# from feed.models import Place
#
# feed_router = Router()
#
#
# async def get_or_create_feed_state(session: AsyncSession, user_id: int) -> UserFeedState:
#     """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     stmt = select(UserFeedState).where(UserFeedState.user_id == user_id)
#     result = await session.execute(stmt)
#     state = result.scalar_one_or_none()
#
#     if not state:
#         state = UserFeedState(user_id=user_id)
#         session.add(state)
#         await session.commit()
#
#     return state
#
#
# async def get_place_history(session: AsyncSession, user_id: int, place_id: int) -> UserPlaceHistory:
#     """–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Å—Ç–æ–º"""
#     stmt = select(UserPlaceHistory).where(
#         UserPlaceHistory.user_id == user_id,
#         UserPlaceHistory.place_id == place_id
#     )
#     result = await session.execute(stmt)
#     return result.scalar_one_or_none()
#
#
# async def update_place_history(session: AsyncSession, user_id: int, place_id: int, **kwargs):
#     """–û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞ –º–µ—Å—Ç–∞"""
#     history = await get_place_history(session, user_id, place_id)
#
#     if not history:
#         history = UserPlaceHistory(user_id=user_id, place_id=place_id)
#         session.add(history)
#
#     for key, value in kwargs.items():
#         if hasattr(history, key):
#             if key == 'show_count':
#                 setattr(history, key, getattr(history, key) + value)
#             else:
#                 setattr(history, key, value)
#
#     history.last_shown = datetime.now()
#     await session.commit()
#     return history
#
#
# @feed_router.message(Command(commands='feed'))
# async def cmd_feed(message: Message, session: AsyncSession):
#     keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="–ù–∞—Å—Ç–æ–ª–∫–∏"), KeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
#             [KeyboardButton(text="–ú–µ—Å—Ç–∞")]
#         ],
#         resize_keyboard=True,
#         one_time_keyboard=True
#     )
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
#         reply_markup=keyboard
#     )
#
#
# @feed_router.message(F.text == "–ú–µ—Å—Ç–∞")
# async def handle_places(message: Message, session: AsyncSession):
#     user_id = message.from_user.id
#
#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã
#     feed_state = await get_or_create_feed_state(session, user_id)
#     feed_state.last_place_id = None
#     await session.commit()
#
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
#     await show_next_place(message, session)
#
#
# async def show_next_place(message: Message, session: AsyncSession):
#     user_id = message.from_user.id
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_stmt = select(User).where(User.tg_id == user_id)
#     user_result = await session.execute(user_stmt)
#     user = user_result.scalar_one_or_none()
#
#     if not user or not user.loc_lat or not user.loc_lon:
#         await message.answer(
#             "üìç –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /start",
#             reply_markup=ReplyKeyboardRemove()
#         )
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
#     place = await get_next_place_for_user(session, user_id, user.loc_lat, user.loc_lon)
#
#     if not place:
#         await message.answer("üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç —Ä—è–¥–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
#         return
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞
#     await update_place_history(session, user_id, place.id, show_count=1)
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã
#     feed_state = await get_or_create_feed_state(session, user_id)
#     feed_state.last_place_id = place.id
#     await session.commit()
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#     caption = f"üèõÔ∏è {place.name}\n\n{place.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
#
#     if place.address:
#         caption += f"üìç –ê–¥—Ä–µ—Å: {place.address}\n"
#
#     is_open = await check_if_place_open(place)
#     status = "üü¢ –û—Ç–∫—Ä—ã—Ç–æ" if is_open else "üî¥ –ó–∞–∫—Ä—ã—Ç–æ"
#     caption += f"üïí {status}\n"
#
#     if place.rating and place.rating > 0:
#         caption += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {place.rating}/5.0\n"
#
#     if place.price_level:
#         price_map = {1: "üí∞ –ù–µ–¥–æ—Ä–æ–≥–æ", 2: "üí∞üí∞ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã", 3: "üí∞üí∞üí∞ –î–æ—Ä–æ–≥–æ"}
#         caption += f"{price_map.get(place.price_level, 'üí∞ –¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
#
#     # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
#     keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ"), KeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫")],
#             [KeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫"), KeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")],
#             [KeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), KeyboardButton(text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")]
#         ],
#         resize_keyboard=True
#     )
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç
#     if place.image_url:
#         await message.answer_photo(
#             photo=place.image_url,
#             caption=caption,
#             reply_markup=keyboard
#         )
#     else:
#         await message.answer(
#             text=caption,
#             reply_markup=keyboard
#         )
#
#
# async def get_next_place_for_user(session: AsyncSession, user_id: int, user_lat: float, user_lon: float):
#     """–ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
#     # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑–æ–≤ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
#     show_count_subquery = (
#         select(
#             UserPlaceHistory.place_id,
#             func.coalesce(func.sum(UserPlaceHistory.show_count), 0).label('total_shows')
#         )
#         .where(UserPlaceHistory.user_id == user_id)
#         .group_by(UserPlaceHistory.place_id)
#         .subquery()
#     )
#
#     # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫–∞–∑–æ–≤ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
#     stmt = (
#         select(Place, show_count_subquery.c.total_shows)
#         .outerjoin(show_count_subquery, Place.id == show_count_subquery.c.place_id)
#         .where(Place.is_active == True)
#         .order_by(
#             show_count_subquery.c.total_shows.asc(),  # –°–Ω–∞—á–∞–ª–∞ –º–µ—Å—Ç–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∫–∞–∑–æ–≤
#             func.abs(Place.loc_lat - user_lat) + func.abs(Place.loc_lon - user_lon)  # –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
#         )
#         .limit(1)
#     )
#
#     result = await session.execute(stmt)
#     row = result.first()
#
#     return row[0] if row else None
#
#
# async def check_if_place_open(place: Place) -> bool:
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–µ—Å—Ç–æ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
#     if not place.opening_time or not place.closing_time or not place.working_days:
#         return True
#
#     now = datetime.now()
#     current_time = now.time()
#     current_weekday = now.strftime("%A").lower()
#
#     if current_weekday not in [day.value for day in place.working_days]:
#         return False
#
#     return place.opening_time <= current_time <= place.closing_time
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
# @feed_router.message(F.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ")
# async def next_place(message: Message, session: AsyncSession):
#     await show_next_place(message, session)
#
#
# @feed_router.message(F.text == "‚ù§Ô∏è –õ–∞–π–∫")
# async def like_place(message: Message, session: AsyncSession):
#     user_id = message.from_user.id
#     feed_state = await get_or_create_feed_state(session, user_id)
#
#     if feed_state.last_place_id:
#         await update_place_history(session, user_id, feed_state.last_place_id, liked=True)
#         await message.answer("üëç –ú–µ—Å—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! –£—á—Ç—É —Ç–≤–æ–π –≤—ã–±–æ—Ä.")
#
#     await show_next_place(message, session)
#
#
# @feed_router.message(F.text == "üëé –î–∏–∑–ª–∞–π–∫")
# async def dislike_place(message: Message, session: AsyncSession):
#     user_id = message.from_user.id
#     feed_state = await get_or_create_feed_state(session, user_id)
#
#     if feed_state.last_place_id:
#         await update_place_history(session, user_id, feed_state.last_place_id, disliked=True)
#         await message.answer("üëé –ü–æ–Ω—è—Ç–Ω–æ, –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∂—É –ø–æ–¥–æ–±–Ω–æ–µ.")
#
#     await show_next_place(message, session)
#
#
# @feed_router.message(F.text == "üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
# async def save_place(message: Message, session: AsyncSession):
#     user_id = message.from_user.id
#     feed_state = await get_or_create_feed_state(session, user_id)
#
#     if feed_state.last_place_id:
#         await update_place_history(session, user_id, feed_state.last_place_id, saved=True)
#         await message.answer("üìå –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
#
#     await show_next_place(message, session)
#
#
# @feed_router.message(F.text == "üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
# async def update_location(message: Message):
#     location_keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
#         ],
#         resize_keyboard=True,
#         one_time_keyboard=True
#     )
#
#     await message.answer(
#         "üìç –û–±–Ω–æ–≤–∏ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
#         reply_markup=location_keyboard
#     )